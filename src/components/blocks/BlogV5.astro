---
// src/components/blocks/BlogV5.astro - Dynamic version

/*
================================================================================
Component: BlogV5 (Dynamic)
Description: A block that displays a header and a grid of blog posts,
             dynamically pulled from the Blog collection.
================================================================================
*/

export interface Props {
  eyebrow: string;
  heading: string;
  button: {
    text: string;
    url: string;
  };
  blogSettings: {
    displayType: 'latest' | 'category' | 'manual';
    numberOfPosts?: number;
    category?: {
      id: string;
      slug: string;
      title: string;
    };
    manualPosts?: Array<{
      id: string;
      title: string;
      slug: string;
      createdAt: string;
      featuredImage?: {
        url: string;
        alt?: string;
      };
      categories?: Array<{
        title: string;
      }>;
    }>;
    excludePosts?: Array<{
      id: string;
    }>;
  };
}

const { eyebrow, heading, button, blogSettings } = Astro.props;

// Helper function for image URLs
const getImageUrl = (imageObj: { url: string; alt?: string }) => {
  return imageObj?.url?.startsWith('http') 
    ? imageObj.url 
    : `http://localhost:3000${imageObj?.url || ''}`;
};

// Helper function to format date
const formatDate = (dateString: string) => {
  const date = new Date(dateString);
  return date.toLocaleDateString('en-US', { 
    year: 'numeric', 
    month: 'long', 
    day: 'numeric' 
  }).toUpperCase();
};

// Fetch blog posts based on settings
let displayPosts: Array<{
  title: string;
  date: string;
  url: string;
  image: {
    url: string;
    alt?: string;
  };
}> = [];

try {
  let fetchUrl = 'http://localhost:3000/api/blog?depth=2';
  
  if (blogSettings.displayType === 'manual' && blogSettings.manualPosts) {
    // Use manually selected posts
    displayPosts = blogSettings.manualPosts.map(post => ({
      title: post.title,
      date: formatDate(post.createdAt),
      url: `/blog/${post.slug}`,
      image: {
        url: getImageUrl(post.featuredImage || { url: '/placeholder-blog.jpg' }),
        alt: post.featuredImage?.alt || post.title,
      },
    }));
  } else {
    // Build query parameters for latest or category posts
    const params = new URLSearchParams();
    
    if (blogSettings.numberOfPosts) {
      params.append('limit', blogSettings.numberOfPosts.toString());
    }
    
    // Add category filter
    if (blogSettings.displayType === 'category' && blogSettings.category) {
      params.append('where[categories][in]', blogSettings.category.id);
    }
    
    // Add exclusions
    if (blogSettings.excludePosts && blogSettings.excludePosts.length > 0) {
      const excludeIds = blogSettings.excludePosts.map(p => p.id).join(',');
      params.append('where[id][not_in]', excludeIds);
    }
    
    // Sort by latest
    params.append('sort', '-createdAt');
    
    const response = await fetch(`${fetchUrl}&${params.toString()}`);
    const data = await response.json();
    
    if (data.docs && Array.isArray(data.docs)) {
      displayPosts = data.docs.map((post: any) => ({
        title: post.title,
        date: formatDate(post.createdAt),
        url: `/blog/${post.slug}`,
        image: {
          url: getImageUrl(post.featuredImage || { url: '/placeholder-blog.jpg' }),
          alt: post.featuredImage?.alt || post.title,
        },
      }));
    }
  }
} catch (error) {
  console.error('Error fetching blog posts:', error);
  // displayPosts will remain empty array, showing the editor helper
}
---

<section
  class="pt-14 md:pt-16 lg:pt-[88px] xl:pt-[100px] pb-14 md:pb-16 lg:pb-[88px] xl:pb-[100px]"
>
  <div class="container">
    <!-- Section Header -->
    <div>
      <p
        class="font-satoshi text-center text-sm font-normal leading-6 tracking-[3px] uppercase reveal-me"
      >
        {eyebrow}
      </p>
      <h2 class="mt-3 mb-10 lg:mb-20 text-center text-appear hidden md:block" set:html={heading}></h2>
      <h2 class="mt-3 mb-10 lg:mb-20 text-center text-appear block md:hidden" set:html={heading}></h2>
    </div>

    {displayPosts.length > 0 ? (
      <!-- Blog Posts Grid -->
      <div
        class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-[30px] gap-y-16 justify-center place-items-center"
      >
        {displayPosts.map((post) => (
          <div class="reveal-me max-w-[370px] group">
            <a href={post.url}>
              <figure class="overflow-hidden">
                <img
                  src={post.image.url}
                  alt={post.image.alt || post.title}
                  class="w-full h-full transition-all duration-500 group-hover:scale-125 group-hover:rotate-3"
                  loading="lazy"
                  width="370"
                  height="250"
                />
              </figure>
              <p
                class="text-sm mb-3.5 md:pb-5 text-secondary dark:text-white leading-[1.1] tracking-[1.12px] uppercase font-poppins font-normal mt-5 md:mt-[30px]"
              >
                {post.date}
              </p>
              <div class="blog-title dark:border-dark border-t pt-5 mb-1">
                <h3
                  class="text[25px] md:text-3xl lg:text-4xl lg:leading-[1.2] lg:tracking-[-0.72px]"
                >
                  {post.title}
                </h3>
              </div>
            </a>
          </div>
        ))}
      </div>
    ) : (
      <!-- Editor Helper -->
      <div class="text-center py-16">
        <div class="bg-blue-100 border border-blue-300 text-blue-700 px-6 py-4 rounded-lg inline-block">
          <p class="font-semibold">üìù No Blog Posts Found</p>
          <p class="text-sm mt-2">
            {blogSettings.displayType === 'manual' 
              ? 'Please select some blog posts in the block settings.'
              : 'Create some blog posts in the admin or adjust your filter settings.'
            }
          </p>
          <a href="http://localhost:3000/admin/collections/blog" class="text-xs underline mt-1 block">
            ‚Üí Manage Blog Posts
          </a>
        </div>
      </div>
    )}

    <!-- Blog Button -->
    <ul class="flex justify-center mt-[56px] mx-auto list-none reveal-me">
      <li class="block md:inline-block w-[90%] mx-auto md:w-auto text-center">
        <a
          href={button.url}
          class="rv-button rv-button-white block md:inline-block"
        >
          <div class="rv-button-top">
            <span>{button.text}</span>
          </div>
          <div class="rv-button-bottom">
            <span>{button.text}</span>
          </div>
        </a>
      </li>
    </ul>
  </div>
</section>