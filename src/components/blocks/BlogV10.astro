---
// src/components/blocks/BlogV10.astro - TypeScript Fixed

export interface Props {
  heading: string;
  button: {
    text: string;
    url: string;
  };
  arrowIcons: {
    lightArrow: {
      url: string;
      alt?: string;
    };
    darkArrow: {
      url: string;
      alt?: string;
    };
  };
  blogSettings: {
    displayType: 'latest' | 'category' | 'manual';
    numberOfPosts?: number;
    category?: {
      id: string;
      slug: string;
      title: string;
    };
    manualPosts?: Array<{
      id: string;
      title: string;
      slug: string;
      createdAt: string;
      featuredImage?: {
        url: string;
        alt?: string;
      };
      categories?: Array<{
        title: string;
      }>;
    }>;
    excludePosts?: Array<{
      id: string;
    }>;
  };
}

const { heading, button, arrowIcons, blogSettings } = Astro.props;

// Helper function for image URLs
const getImageUrl = (imageObj: { url: string; alt?: string } | undefined): string => {
  if (!imageObj?.url) return '/placeholder-blog.jpg';
  return imageObj.url.startsWith('http') 
    ? imageObj.url 
    : `http://localhost:3000${imageObj.url}`;
};

// Helper function to format date
const formatDate = (dateString: string): string => {
  const date = new Date(dateString);
  return date.toLocaleDateString('en-US', { 
    year: 'numeric', 
    month: 'long', 
    day: 'numeric' 
  }).toUpperCase();
};

// Prepare arrow icon URLs with fallbacks
const lightArrowUrl = arrowIcons?.lightArrow ? getImageUrl(arrowIcons.lightArrow) : '/arrow-light.svg';
const darkArrowUrl = arrowIcons?.darkArrow ? getImageUrl(arrowIcons.darkArrow) : '/arrow-dark.svg';

// Fetch blog posts based on settings
let displayPosts: Array<{
  title: string;
  date: string;
  url: string;
  image: {
    url: string;
    alt?: string;
  };
}> = [];

try {
  const baseUrl = 'http://localhost:3000/api/blog?depth=2';
  
  if (blogSettings?.displayType === 'manual' && blogSettings.manualPosts?.length) {
    // Use manually selected posts
    displayPosts = blogSettings.manualPosts.map(post => ({
      title: post.title || 'Untitled Post',
      date: formatDate(post.createdAt),
      url: `/blog/${post.slug}`,
      image: {
        url: getImageUrl(post.featuredImage),
        alt: post.featuredImage?.alt || post.title,
      },
    }));
  } else {
    // Build query parameters for latest or category posts
    const params = new URLSearchParams();
    
    if (blogSettings?.numberOfPosts) {
      params.append('limit', blogSettings.numberOfPosts.toString());
    }
    
    // Add category filter
    if (blogSettings?.displayType === 'category' && blogSettings.category?.id) {
      params.append('where[categories][in]', blogSettings.category.id);
    }
    
    // Add exclusions
    if (blogSettings?.excludePosts?.length) {
      const excludeIds = blogSettings.excludePosts.map(p => p.id).join(',');
      params.append('where[id][not_in]', excludeIds);
    }
    
    // Sort by latest
    params.append('sort', '-createdAt');
    
    const fetchUrl = params.toString() ? `${baseUrl}&${params.toString()}` : baseUrl;
    const response = await fetch(fetchUrl);
    const data = await response.json();
    
    if (data.docs && Array.isArray(data.docs)) {
      displayPosts = data.docs.map((post: any) => ({
        title: post.title || 'Untitled Post',
        date: formatDate(post.createdAt),
        url: `/blog/${post.slug}`,
        image: {
          url: getImageUrl(post.featuredImage),
          alt: post.featuredImage?.alt || post.title,
        },
      }));
    }
  }
} catch (error) {
  console.error('Error fetching blog posts:', error);
  // displayPosts will remain empty array, showing the editor helper
}
---

<section class="pt-14 md:pt-16 lg:pt-[88px] xl:pt-[100px] pb-14 md:pb-16 lg:pb-[88px] xl:pb-[100px] relative overflow-hidden">
  <div class="container">
    <div class="flex flex-col md:flex-row gap-y-4 gap-x-10 justify-center lg:justify-between items-start md:items-center mb-10 md:mb-20 max-md:px-10">
      <div>
        <h2 class="text-appear" set:html={heading}></h2>
      </div>
      <ul class="reveal-me">
        <li class="block md:inline-block w-[90%] mx-auto md:w-auto">
          <a href={button.url} class="rv-button rv-button-white block md:inline-block text-center">
            <div class="rv-button-top">
              <span>{button.text}</span>
            </div>
            <div class="rv-button-bottom">
              <span>{button.text}</span>
            </div>
          </a>
        </li>
      </ul>
    </div>

    {displayPosts.length > 0 ? (
      <article class="mt-20 [&>*:not(last-child)]:mb-10">
        {displayPosts.map((post) => (
          <div class="border-b dark:border-dark pb-10 flex flex-col-reverse gap-y-7 lg:flex-row justify-center md:justify-normal items-center reveal-me underline-hover-effect group">
            <div class="max-lg:self-center lg:self-center max-lg:max-w-96">
              <div class="rv-badge mb-5">
                <span class="rv-badge-text">{post.date}</span>
              </div>
              <a href={post.url}>
                <div class="blog-title mb-6 lg:mb-10">
                  <h3 class="text-[25px] md:text-3xl lg:text-4xl lg:leading-[1.2] lg:tracking-[-0.72px]">
                    {post.title}
                  </h3>
                </div>
              </a>
              <a href={post.url} class="rv-button rv-button-primary2">
                <div class="rv-button-top !text-center flex items-center">
                  <span class="pr-1">READ MORE</span>
                  <img 
                    class="inline dark:hidden" 
                    src={lightArrowUrl} 
                    alt={arrowIcons?.lightArrow?.alt || "Arrow Icon"} 
                    width="16" 
                    height="16" 
                    loading="lazy" 
                  />
                  <img 
                    class="hidden dark:inline" 
                    src={darkArrowUrl} 
                    alt={arrowIcons?.darkArrow?.alt || "Arrow Icon"} 
                    width="16" 
                    height="16" 
                    loading="lazy" 
                  />
                </div>
                <div class="rv-button-bottom !text-center flex items-center">
                  <span class="pr-1">READ MORE</span>
                  <img 
                    class="inline" 
                    src={lightArrowUrl} 
                    alt={arrowIcons?.lightArrow?.alt || "Arrow Icon"} 
                    width="16" 
                    height="16" 
                    loading="lazy" 
                  />
                </div>
              </a>
            </div>
            <figure class="overflow-hidden max-w-[370px] w-full">
              <a href={post.url}>
                <img 
                  src={post.image.url} 
                  alt={post.image.alt || post.title} 
                  class="w-full h-full transition-all duration-500 group-hover:scale-125 group-hover:rotate-3"
                  width="370"
                  height="250"
                  loading="lazy"
                />
              </a>
            </figure>
          </div>
        ))}
      </article>
    ) : (
      <!-- Editor Helper -->
      <div class="text-center py-16">
        <div class="bg-blue-100 border border-blue-300 text-blue-700 px-6 py-4 rounded-lg inline-block">
          <p class="font-semibold">üìù No Blog Posts Found</p>
          <p class="text-sm mt-2">
            {blogSettings?.displayType === 'manual' 
              ? 'Please select some blog posts in the block settings.'
              : 'Create some blog posts in the admin or adjust your filter settings.'
            }
          </p>
          <a href="http://localhost:3000/admin/collections/blog" class="text-xs underline mt-1 block">
            ‚Üí Manage Blog Posts
          </a>
        </div>
      </div>
    )}
  </div>
</section>