---
// src/components/blocks/AboutMarqueeV2.astro

/*
================================================================================
Component: AboutMarqueeV2 (Payload Block Version)
Description: A block that displays a prominent heading followed by a skewed,
             infinitely scrolling marquee of images from Payload CMS.
================================================================================
*/

// Note: We inline the marquee card HTML since Payload serves images as URLs, not ImageMetadata

// Define the properties for the entire block (from Payload)
export interface Props {
  heading: any; // RichText from Payload
  marqueeImages: Array<{
    image: {
      url: string;
      alt?: string;
    };
    alt: string;
    id?: string;
  }>;
}

const { heading, marqueeImages } = Astro.props;

// Convert Payload RichText to HTML string
const getTextContent = (richTextContent: any): string => {
  if (typeof richTextContent === 'string') {
    return richTextContent;
  }
  
  if (richTextContent?.root?.children) {
    return richTextContent.root.children
      .map((child: any) => {
        if (child.type === 'paragraph' && child.children) {
          return child.children.map((textNode: any) => textNode.text || '').join('');
        }
        return child.text || '';
      })
      .join(' ');
  }
  
  return '';
};

const headingContent = getTextContent(heading);
// Add the helper function
const getImageUrl = (imageObj: { url: string; alt?: string }) => {
  return imageObj?.url?.startsWith('http') 
    ? imageObj.url 
    : `http://localhost:3000${imageObj?.url || ''}`;
};
// Transform marquee images to the format expected by MarqueeImageCard
const transformedImages = marqueeImages?.map((item) => ({
  image: getImageUrl(item.image),  // âœ… Use the helper function
  altText: item.alt || item.image?.alt || 'Marquee image',
})) || [];
---

<!--
================================================================================
This section includes a heading and the marquee. Note that the inline style
for the `transform` is kept, as it's likely a starting point for a GSAP
animation defined in a global script.
================================================================================
-->
<section
  id="about"
  class="pt-10 sm:pt-16 md:pt-[100px] relative overflow-hidden"
  aria-labelledby="about-heading"
>
  <div class="container">
    <!-- Section Header -->
    <div>
      <h2
        id="about-heading"
        class="reveal-text-2 text-3xl lg:text-5xl lg:leading-[1.5] text-secondary dark:text-backgroundBody mb-8"
        set:html={headingContent}
      />
    </div>
  </div>

  <!-- Skew Marquee Start -->
  <div
    style="transform: translate3d(-200px, 0px, 0px) scale3d(1, 1, 1) rotateX(30deg) rotateY(17deg) rotateZ(342deg) skew(7deg, 359deg); transform-style: preserve-3d;"
    id="skew-Marquee"
    aria-label="Project showcase gallery"
  >
    <div class="pb-20 lg:pb-32 pt-20">
      <!-- Marquee Wrapper -->
      <div class="relative">
        <!-- Infinite Scroll Container -->
        <div
          class="z-50 flex gap-5 w-fit flex-nowrap whitespace-nowrap will-change-transform marquee-inner reveal-me"
          aria-live="polite"
        >
          <!-- Loop through transformed marquee images and render a card for each -->
          {transformedImages.map((item) => (
            <figure
              class="marquee-part flex items-center justify-center size-[370px] z-50 flex-shrink-0"
            >
              <img src={item.image} alt={item.altText} width="370" height="370" />
            </figure>
          ))}
        </div>
      </div>
    </div>
  </div>
</section>